"""combine draws and observations

Revision ID: 1c2cb1431017
Revises: b49be701129d
Create Date: 2025-04-17 19:33:16.425762

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1c2cb1431017"
down_revision: Union[str, None] = "b49be701129d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    observationtype = sa.Enum("USER", "AUTO", name="observationtype")
    observationtype.create(op.get_bind())

    op.drop_table("contextual_observations")
    op.drop_table("mab_observations")
    op.drop_table("observations_base")
    op.add_column("arms_base", sa.Column("n_outcomes", sa.Integer(), nullable=False))
    op.add_column(
        "draws_base",
        sa.Column("observed_datetime_utc", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "draws_base",
        sa.Column(
            "observation_type",
            observationtype,  # Use the created enum type
            nullable=True,
        ),
    )
    op.add_column("draws_base", sa.Column("reward", sa.Float(), nullable=True))
    op.drop_column("mab_arms", "n_outcomes")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "mab_arms",
        sa.Column("n_outcomes", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_column("draws_base", "reward")
    op.drop_column("draws_base", "observation_type")
    op.drop_column("draws_base", "observed_datetime_utc")
    op.drop_column("arms_base", "n_outcomes")
    op.create_table(
        "mab_observations",
        sa.Column("observation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "reward",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["observation_id"],
            ["observations_base.observation_id"],
            name="mab_observations_observation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("observation_id", name="mab_observations_pkey"),
    )
    op.create_table(
        "contextual_observations",
        sa.Column("observation_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "reward",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "context_val",
            postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["observation_id"],
            ["observations_base.observation_id"],
            name="contextual_observations_observation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("observation_id", name="contextual_observations_pkey"),
    )
    op.create_table(
        "observations_base",
        sa.Column("observation_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("arm_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("experiment_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "observed_datetime_utc",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "obs_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["arm_id"], ["arms_base.arm_id"], name="observations_base_arm_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments_base.experiment_id"],
            name="observations_base_experiment_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="observations_base_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("observation_id", name="observations_base_pkey"),
    )

    sa.Enum(name="observationtype").drop(op.get_bind())
    # ### end Alembic commands ###
