"""clean start

Revision ID: faf4228e13a3
Revises:
Create Date: 2025-04-17 21:18:03.761219

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "faf4228e13a3"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(length=96), nullable=False),
        sa.Column("hashed_api_key", sa.String(length=96), nullable=False),
        sa.Column("api_key_first_characters", sa.String(length=5), nullable=False),
        sa.Column(
            "api_key_updated_datetime_utc", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column("experiments_quota", sa.Integer(), nullable=True),
        sa.Column("api_daily_quota", sa.Integer(), nullable=True),
        sa.Column("created_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("access_level", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("hashed_api_key"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "experiments_base",
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("exp_type", sa.String(length=50), nullable=False),
        sa.Column("prior_type", sa.String(length=50), nullable=False),
        sa.Column("reward_type", sa.String(length=50), nullable=False),
        sa.Column("created_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("n_trials", sa.Integer(), nullable=False),
        sa.Column("last_trial_datetime_utc", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("experiment_id"),
    )
    op.create_table(
        "messages",
        sa.Column("message_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("is_unread", sa.Boolean(), nullable=False),
        sa.Column("created_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("message_type", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("message_id"),
    )
    op.create_table(
        "arms_base",
        sa.Column("arm_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("arm_type", sa.String(length=50), nullable=False),
        sa.Column("n_outcomes", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments_base.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("arm_id"),
    )
    op.create_table(
        "contextual_mabs",
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"], ["experiments_base.experiment_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("experiment_id"),
    )
    op.create_table(
        "event_messages",
        sa.Column("message_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments_base.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["message_id"], ["messages.message_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("message_id"),
    )
    op.create_table(
        "mabs",
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"], ["experiments_base.experiment_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("experiment_id"),
    )
    op.create_table(
        "notifications",
        sa.Column("notification_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "notification_type",
            sa.Enum(
                "DAYS_ELAPSED",
                "TRIALS_COMPLETED",
                "PERCENTAGE_BETTER",
                name="eventtype",
            ),
            nullable=False,
        ),
        sa.Column("notification_value", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments_base.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("notification_id"),
    )
    op.create_table(
        "contexts",
        sa.Column("context_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("value_type", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["contextual_mabs.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("context_id"),
    )
    op.create_table(
        "contextual_arms",
        sa.Column("arm_id", sa.Integer(), nullable=False),
        sa.Column("mu_init", sa.Float(), nullable=False),
        sa.Column("sigma_init", sa.Float(), nullable=False),
        sa.Column("mu", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.Column("covariance", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.ForeignKeyConstraint(["arm_id"], ["arms_base.arm_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("arm_id"),
    )
    op.create_table(
        "draws_base",
        sa.Column("draw_id", sa.String(), nullable=False),
        sa.Column("arm_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("draw_datetime_utc", sa.DateTime(timezone=True), nullable=False),
        sa.Column("observed_datetime_utc", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "observation_type",
            sa.Enum("USER", "AUTO", name="observationtype"),
            nullable=True,
        ),
        sa.Column("draw_type", sa.String(length=50), nullable=False),
        sa.Column("reward", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["arm_id"],
            ["arms_base.arm_id"],
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments_base.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("draw_id"),
    )
    op.create_table(
        "mab_arms",
        sa.Column("arm_id", sa.Integer(), nullable=False),
        sa.Column("alpha", sa.Float(), nullable=True),
        sa.Column("beta", sa.Float(), nullable=True),
        sa.Column("mu", sa.Float(), nullable=True),
        sa.Column("sigma", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(["arm_id"], ["arms_base.arm_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("arm_id"),
    )
    op.create_table(
        "contextual_draws",
        sa.Column("draw_id", sa.String(), nullable=False),
        sa.Column("context_val", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.ForeignKeyConstraint(
            ["draw_id"], ["draws_base.draw_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("draw_id"),
    )
    op.create_table(
        "mab_draws",
        sa.Column("draw_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["draw_id"], ["draws_base.draw_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("draw_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("mab_draws")
    op.drop_table("contextual_draws")
    op.drop_table("mab_arms")
    op.drop_table("draws_base")
    op.drop_table("contextual_arms")
    op.drop_table("contexts")
    op.drop_table("notifications")
    op.drop_table("mabs")
    op.drop_table("event_messages")
    op.drop_table("contextual_mabs")
    op.drop_table("arms_base")
    op.drop_table("messages")
    op.drop_table("experiments_base")
    op.drop_table("users")
    # ### end Alembic commands ###
