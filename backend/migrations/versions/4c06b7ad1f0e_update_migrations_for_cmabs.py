"""update migrations for cmabs

Revision ID: 4c06b7ad1f0e
Revises: 196fdaacaabe
Create Date: 2025-03-06 00:29:46.273934

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4c06b7ad1f0e"
down_revision: Union[str, None] = "196fdaacaabe"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "contextual_arms_experiment_id_fkey", "contextual_arms", type_="foreignkey"
    )
    op.drop_constraint(
        "contextual_arms_user_id_fkey", "contextual_arms", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "contextual_arms", "arms_base", ["arm_id"], ["arm_id"], ondelete="CASCADE"
    )
    op.drop_column("contextual_arms", "description")
    op.drop_column("contextual_arms", "experiment_id")
    op.drop_column("contextual_arms", "user_id")
    op.drop_column("contextual_arms", "name")
    op.drop_constraint(
        "contextual_mabs_user_id_fkey", "contextual_mabs", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "contextual_mabs",
        "experiments_base",
        ["experiment_id"],
        ["experiment_id"],
        ondelete="CASCADE",
    )
    op.drop_column("contextual_mabs", "user_id")
    op.drop_column("contextual_mabs", "description")
    op.drop_column("contextual_mabs", "is_active")
    op.drop_column("contextual_mabs", "prior_type")
    op.drop_column("contextual_mabs", "name")
    op.drop_column("contextual_mabs", "reward_type")
    op.alter_column(
        "contextual_observations",
        "reward",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.drop_constraint(
        "contextual_observations_arm_id_fkey",
        "contextual_observations",
        type_="foreignkey",
    )
    op.drop_constraint(
        "contextual_observations_user_id_fkey",
        "contextual_observations",
        type_="foreignkey",
    )
    op.drop_constraint(
        "contextual_observations_experiment_id_fkey",
        "contextual_observations",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "contextual_observations",
        "observations_base",
        ["observation_id"],
        ["observation_id"],
        ondelete="CASCADE",
    )
    op.drop_column("contextual_observations", "obs_timestamp_utc")
    op.drop_column("contextual_observations", "experiment_id")
    op.drop_column("contextual_observations", "arm_id")
    op.drop_column("contextual_observations", "user_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "contextual_observations",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_observations",
        sa.Column("arm_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_observations",
        sa.Column("experiment_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_observations",
        sa.Column(
            "obs_timestamp_utc",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "contextual_observations", type_="foreignkey")
    op.create_foreign_key(
        "contextual_observations_experiment_id_fkey",
        "contextual_observations",
        "contextual_mabs",
        ["experiment_id"],
        ["experiment_id"],
    )
    op.create_foreign_key(
        "contextual_observations_user_id_fkey",
        "contextual_observations",
        "users",
        ["user_id"],
        ["user_id"],
    )
    op.create_foreign_key(
        "contextual_observations_arm_id_fkey",
        "contextual_observations",
        "contextual_arms",
        ["arm_id"],
        ["arm_id"],
    )
    op.alter_column(
        "contextual_observations",
        "reward",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.add_column(
        "contextual_mabs",
        sa.Column(
            "reward_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "contextual_mabs",
        sa.Column("name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_mabs",
        sa.Column(
            "prior_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "contextual_mabs",
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_mabs",
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "contextual_mabs",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "contextual_mabs", type_="foreignkey")
    op.create_foreign_key(
        "contextual_mabs_user_id_fkey",
        "contextual_mabs",
        "users",
        ["user_id"],
        ["user_id"],
    )
    op.add_column(
        "contextual_arms",
        sa.Column("name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_arms",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_arms",
        sa.Column("experiment_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_arms",
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "contextual_arms", type_="foreignkey")
    op.create_foreign_key(
        "contextual_arms_user_id_fkey",
        "contextual_arms",
        "users",
        ["user_id"],
        ["user_id"],
    )
    op.create_foreign_key(
        "contextual_arms_experiment_id_fkey",
        "contextual_arms",
        "contextual_mabs",
        ["experiment_id"],
        ["experiment_id"],
    )
    # ### end Alembic commands ###
