"""add observation db for cmab

Revision ID: e79baca70383
Revises: fcaf465a795d
Create Date: 2025-02-27 16:56:27.239369

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e79baca70383"
down_revision: Union[str, None] = "fcaf465a795d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contextual_observations",
        sa.Column("observation_id", sa.Integer(), nullable=False),
        sa.Column("arm_id", sa.Integer(), nullable=False),
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("reward", sa.Float(), nullable=True),
        sa.Column("context_val", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.Column("obs_timestamp_utc", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["arm_id"],
            ["contextual_arms.arm_id"],
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["contextual_mabs.experiment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("observation_id"),
    )
    op.add_column(
        "contexts", sa.Column("value_type", sa.String(length=50), nullable=False)
    )
    op.drop_column("contexts", "values")
    op.drop_column("contexts", "weight")
    op.add_column("contextual_arms", sa.Column("mu_init", sa.Float(), nullable=False))
    op.add_column(
        "contextual_arms", sa.Column("sigma_init", sa.Float(), nullable=False)
    )
    op.add_column(
        "contextual_arms",
        sa.Column("_mu", postgresql.ARRAY(sa.Float()), nullable=False),
    )
    op.add_column(
        "contextual_arms",
        sa.Column("_covariance", postgresql.ARRAY(sa.Float()), nullable=False),
    )
    op.drop_column("contextual_arms", "alpha_prior")
    op.drop_column("contextual_arms", "successes")
    op.drop_column("contextual_arms", "failures")
    op.drop_column("contextual_arms", "beta_prior")
    op.add_column(
        "contextual_mabs", sa.Column("prior_type", sa.String(length=50), nullable=False)
    )
    op.add_column(
        "contextual_mabs",
        sa.Column("reward_type", sa.String(length=50), nullable=False),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("contextual_mabs", "reward_type")
    op.drop_column("contextual_mabs", "prior_type")
    op.add_column(
        "contextual_arms",
        sa.Column("beta_prior", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contextual_arms",
        sa.Column(
            "failures",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "contextual_arms",
        sa.Column(
            "successes",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "contextual_arms",
        sa.Column("alpha_prior", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_column("contextual_arms", "_covariance")
    op.drop_column("contextual_arms", "_mu")
    op.drop_column("contextual_arms", "sigma_init")
    op.drop_column("contextual_arms", "mu_init")
    op.add_column(
        "contexts",
        sa.Column(
            "weight",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "contexts",
        sa.Column(
            "values",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_column("contexts", "value_type")
    op.drop_table("contextual_observations")
    # ### end Alembic commands ###
